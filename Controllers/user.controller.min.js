/* eslint-disable no-undef */
/* eslint-disable no-unused-vars */
import Vote from '../Models/vote.model.min.js'
import Movie from '../Models/movie.model.min.js'
import User from '../Models/user.model.min.js'
import { customRandom } from 'nanoid'
import bcryptjs from 'bcryptjs'
import jwt from 'jsonwebtoken'
import { log } from 'console'
import seedrandom from 'seedrandom'
import CryptoJS from 'crypto-js'

const usercontroller = {
    register: async(req, res)=>{
        try {
            const {email, password, name, role} = req.body;
            const user = await User.findOne({email})
            if(user){
                return res.status(400).json({message:"User already exists"})

            } 
            
            // console.log(salt)
            let hashPassword = CryptoJS.AES.encrypt(password, email).toString();
            // console.log(hashPassword);
            
        
            // console.log(token);
            // console.log(token);
            
            const newUser = new User({email, password:hashPassword, name, role})
            // console.log(newUser);
            
            await newUser.save()
            const seed = `${newUser._id}`
            const rng = seedrandom(seed)
            const nanoid = customRandom('qwertyuiopasdfghjklzxcvbnm!@#$%^&*()?/1234567890', 16, size => {
              return (new Uint8Array(size)).map(() => 256 * rng())
            })
            const tokenGenerate = nanoid()
            // console.log(nanoid());
            const tokenUpdate = await User.findByIdAndUpdate(newUser._id,{token:tokenGenerate})
            tokenUpdate.save()
            res.status(200).json({message:"Account created successfully", newUser})
            
        } catch (error) {
            res.status(500).json({message:"Server Error"})
        }
    },
    login: async (req, res) =>{
        const {email, password} = req.body;

        // console.log(email, password)
        try{
        const user = await User.findOne({email})
        // console.log(user)
        if(!user){
            return res.status(400).json({message:"User not found"})
        }

        // log(user.password)
        let isMatch = CryptoJS.AES.decrypt(user.password, email).toString(CryptoJS.enc.Utf8);
        console.log(isMatch)
            if(isMatch !== password){
                return res.status(401).json({message:"Invalid credentials"})
            }
            
            const token = jwt.sign({
                name: user.name,
                id: user._id
            }, process.env.secret)
            // log(token)
            res.cookie('token', token, {
                httpOnly: true,
                sameSite: 'strict',
                expires: new Date(Date.now() + 24 * 60 * 60 * 1000),
                secure: true,
            })
            
            res.status(200).json({message:"Logged in successfully", token, user})
            
        
            
    } catch (error) {
     res.status(500).json({message:"Server Error"})       
    }},
    addMovie: async(req, res)=>{
        const {title, year, rating, image} = req.body
        const userId = req.userId
        console.log(userId)
        const user = await User.findById(userId)
        log(user)
        let arr=user.movie
        console.log(arr)
       
        try {
            const newMovie = new Movie({title, year, rating, image, userId})
            await newMovie.save()
            const vote1 = new Vote({userId:userId, movie1:{movieId:newMovie._id, title:title, year:year, rating:rating, image:image}})
            log(vote1)
            // const userMovieUpdate = await User.findByIdAndUpdate(userId,{movie})
            await vote1.save()
            arr.push(vote1._id)
            await User.findByIdAndUpdate(userId,{movie:arr})
            log(arr)
            res.status(200).json({message:"Movie added", newMovie, vote1})
            
        } catch (error) {
            res.status(500).json({message:"Server Error"})
        }
    },
    addMovie2: async(req, res)=>{
        const {title, year, rating, image} = req.body
        const {voteId} = req.params
        const userId = req.userId
        console.log(userId)
       
        
        try {
            const newMovie = new Movie({title, year, rating, image, userId})
            log(newMovie)
            await newMovie.save()
          
            const vote2 = await Vote.findOneAndUpdate({_id:voteId}, {movie2 : {movieId:newMovie._id, percentage:0, title:title, year:year, rating:rating, image:image}})
            console.log(vote2);
            
            await vote2.save()
            res.status(200).json({message:"Movie added", newMovie,vote2})
            
        } catch (error) {
            res.status(500).json({message:"Server Error"})
        }
    },
    voteMovie1:async(req,res)=>{
        const {movieId1} = req.body
        const {voteId} = req.params
        log(movieId1, voteId)
        const vote = await Vote.findById(voteId);
        log(vote)
      log(vote.movie1.movieId.toString())
      if(vote.movie1.movieId.toString() !== movieId1){
        return res.status(400).json({message:"Invalid ID"})
      }
          vote.movie1.percentage += 1;
        // log(movieUpdate1)
        await vote.save()
        res.status(200).json({message:"Movie voted", vote})
    },
    voteMovie2:async(req,res)=>{
        const {movieId2} = req.body
        const {voteId} = req.params
        const vote = await Vote.findById(voteId);
       
        if(vote.movie2.movieId.toString() !== movieId2){
            return res.status(400).json({message:"Invalid ID"})
          }
              vote.movie2.percentage += 1;
            // log(movieUpdate1)
            await vote.save()
        res.status(200).json({message:"Movie voted", vote})
    },
    getMovies: async(req, res)=>{
        const {userId} = req.params;
        console.log(userId);
        
        try {
            
            const user = await User.findById(userId).select('-_id movie')
            console.log(user);
            
            res.status(200).json({message:"Fetched movies", user})
        } catch (error) {
            res.status(500).json({message:"Internal Server Error"})
            
        }
    },
    getResult: async(req, res)=>{
        const {movieId} = req.params
        const movie = await Vote.findById(movieId)
        const moviePercentage1 = movie.movie1.percentage
        const moviePercentage2 = movie.movie2.percentage
        const sum = moviePercentage1 - moviePercentage2
        const movieDetails = await Vote.findById(movieId)
        const result = await Vote.findByIdAndUpdate(movieId, {result:sum})
        await result.save()
        if(sum>0){
            const winnerMovie = await Movie.findById(movie.moviePercentage1.movieId)
            const winner = await Vote.findByIdAndUpdate(movieId, {winner: winnerMovie.title})
            await winner.save()
            return await res.status(200).json({message:"Winner is", winner, winnerMovie, movieDetails})
        }
        else if(sum < 0){
            const winnerMovie = await Movie.findById(movie.moviePercentage2.movieId)
            const winner = await Vote.findByIdAndUpdate(movieId, {winner: winnerMovie.title, movieDetails})
            await winner.save()

            return await res.status(200).json({message:"Winner is", winner, winnerMovie, movieDetails})
        }
        else{
            const winnerMovie = await Vote.findByIdAndUpdate(movieId, {winner: "Tie"})
            await winnerMovie.save()
             return await res.status(200).json({message:"Result is Tie", winnerMovie, movieDetails})
          

        }

    }

}

export default usercontroller